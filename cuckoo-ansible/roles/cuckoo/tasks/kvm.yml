---

# Requested package manager apt was not usable by this module: 'APT' object has
# no attribute '_cache'
#- name: Gather the rpm package facts
#  package_facts:
#    manager: apt
#    strategy: all

#- name: Print the rpm package facts
#  debug:
#    var: ansible_facts.packages

- name: check if qemu installed currently
  command: "dpkg-query -W qemu-3.1.0"
  ignore_errors: true
  register: installed_package

- name: patch and install qemu
  sudo: yes
  block:
      - name: copy script to server
        copy: 
          src: "{{ role_path  }}/files/qemu-patch.sh"
          dest: /tmp/
          mode: 0755
      - name: execute the script
        command: /tmp/qemu-patch.sh qemu
        register: result
        failed_when: '"Patched" not in result.stdout'
  when: installed_package is failed

- name: install kvm/libvirt using apt
  sudo: yes
  apt:
      pkg:
        - libvirt-bin
        - virtinst
        - virt-manager
        - libvirt-dev
        - bridge-utils
        - cpu-checker
      state: latest
      dpkg_options: 'force-overwrite'
  register: pkg_status
  failed_when: pkg_status is failed

# configure kvm groups and iface
- name: check if kvm drivers installed successfully
  stat:
    path: "/dev/{{ item }}"
  with_items:
   - kvm
  register: result

- name: pip | install python package dependencies
  become_user: "{{ cuckoo_user }}"
  pip:
      name: libvirt-python
      state: present
      virtualenv: "{{ cuckoo_virtenv }}"
      virtualenv_command: virtualenv
      virtualenv_python: python2.7
  register: pkg_status
  failed_when: pkg_status is failed

- name: append cuckoo user to libvirtd and kvm groups
  become: yes
  user:
    name: "{{ cuckoo_user }}"
    shell: /bin/bash
    groups: libvirtd, kvm
    append: yes

- name: reset ssh connection to allow user changes to affect current login user
  meta: reset_connection

- name: setup libvirtd unix ro/rw permissions
  replace:
    path: "{{ libvirt_conf }}"
    regexp: '{{ item.regex }}'
    replace: '{{ item.replace }}'
    owner: root
    group: root
  with_items:
    - { regex: '#unix_sock_group', replace: 'unix_sock_group' }
    - { regex: '#unix_sock_ro_perms = "0777"', replace: 'unix_sock_ro_perms = "0770"' }
    - { regex:  '#unix_sock_rw_perms = "0770"', replace: 'unix_sock_rw_perms = "0770"'}
    - { regex:  '#auth_unix_ro = "none"', replace: 'auth_unix_ro = "none"'}
    - { regex:  '#auth_unix_rw = "none"', replace: 'auth_unix_rw = "none"'}

- name: configuring apparmor for libvirtd
  block:
    - name: setup user/group qemu.conf
      replace:
        path: "{{ qemu_conf }}"
        regexp: '{{ item.regex }}'
        replace: '{{ item.replace }}'
        owner: root
        group: root
      with_items:
        - { regex: '#user = "root"', replace: 'user = "{{ cuckoo_user }}"' }
        - { regex: '#group = "root"', replace: 'group = "libvirtd"' }
        - { regex: '#security_driver = "selinux"', replace: 'security_driver = "none"' }
    - name: disable apparmor for libvirtd
      command: aa-disable /usr/sbin/libvirtd
      ignore_errors: yes

    #- name: configure kvm bridge iface
    #  become: yes
    #  become_user: root
    #  block:
    #    - name: add source of /etc/network/interfaces.d/* to network
    #      lineinfile:
    #        path: /etc/network/interfaces
    #        line: source /etc/network/interfaces.d/*
    #
    #    - name: config virtbr0 iface kvm
    #      template:
    #        src: virbr0.conf.j2
    #        dest: "/etc/network/interfaces.d/{{ kvm_iface }}"
    #
    #    - name: Restart network service for interface eth0
    #      shell: |
    #        ifdown {{ kvm_iface }} && ifup {{ kvm_iface }}
    #
    #  when: result.results[0].stat.exists
